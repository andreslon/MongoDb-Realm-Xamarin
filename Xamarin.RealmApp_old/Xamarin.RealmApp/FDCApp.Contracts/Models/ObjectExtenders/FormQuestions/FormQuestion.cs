using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Input;
using FDCApp.Contracts.Constants;
using FDCApp.Contracts.Core;
using FDCApp.Contracts.Enumerations;
using Newtonsoft.Json;
using Prism.Mvvm;
using SQLite;
using SQLiteNetExtensions.Attributes;

namespace FDCApp.Contracts.Models.FormQuestions
{
    public partial class FormQuestion : BindableBase
    {
        #region Private properties
        [JsonIgnore]
        private string _answer;
        #endregion

        public FormItemType? Type
        {
            get
            {
                switch (this.AnswerType)
                {
                    case "RADIO_BUTTON":
                        return FormItemType.RadioButton;
                    case "NUMERIC":
                        return FormItemType.EntryField;
                    case "FREE_TEXT_SHORT":
                        return FormItemType.Description;
                    case "FREE_TEXT_LARGE":
                        return FormItemType.EditorField;
                    case "LIST_VALUES":
                        return FormItemType.List;
                    case "DATE_PICKER":
                        return FormItemType.Date;
                    case "DATETIME_PICKER":
                        return FormItemType.Datetime;
                    case "FEET_INCHES":
                        return FormItemType.DoubleEntryField;
                    case "AUTOGENERATED":
                        return FormItemType.Autogenerated;
                    case "GPS_COORDINATES":
                        return FormItemType.GpsCoordinates;
                    case "FORM_LIST":
                        return FormItemType.FormList;
                    case "WARNING":
                        return FormItemType.Warning;
                    case "SEARCHABLE_LIST":
                        return FormItemType.SearchableList;
                    default:
                        return null;
                }
            }
            set
            {
                switch (value)
                {
                    case FormItemType.RadioButton:
                        AnswerType = "RADIO_BUTTON";
                        break;
                    case FormItemType.EntryField:
                        AnswerType = "NUMERIC";
                        break;
                    case FormItemType.Description:
                        AnswerType = "FREE_TEXT_SHORT";
                        break;
                    case FormItemType.EditorField:
                        AnswerType = "FREE_TEXT_LARGE";
                        break;
                    case FormItemType.List:
                        AnswerType = "LIST_VALUES";
                        break;
                    case FormItemType.Date:
                        AnswerType = "DATE_PICKER";
                        break;
                    case FormItemType.DoubleEntryField:
                        AnswerType = "FEET_INCHES";
                        break;
                    case FormItemType.Autogenerated:
                        AnswerType = "AUTOGENERATED";
                        break;
                    case FormItemType.GpsCoordinates:
                        AnswerType = "GPS_COORDINATES";
                        break;
                    case FormItemType.FormList:
                        AnswerType = "FORM_LIST";
                        break;
                    case FormItemType.Warning:
                        AnswerType = "WARNING";
                        break;
                    case FormItemType.SearchableList:
                        AnswerType = "SEARCHABLE_LIST";
                        break;
                    default:
                        break;
                }
            }
        }

        [JsonIgnore]
        [Ignore]
        public Guid FormTypeId { get; set; }

        [JsonIgnore]
        [Ignore]
        public Guid SiteId { get; set; }

        [JsonIgnore]
        [Ignore]
        public Guid? AssetId { get; set; }

        [JsonIgnore]
        [Ignore]
        public ICommand FormActionCommand { get; set; }

        [JsonIgnore]
        [Ignore]
        public Guid? ParentId { get; set; }

        [JsonIgnore]
        [Ignore]
        public string Answer
        {
            get
            {
                return _answer;
            }
            set
            {
                SetProperty(ref _answer, value);

                if (!IsValidFormat())
                    return;

                ValidateConditionalObjectsVisibility();
                ValidateMandatoryAnswer();
                ValidateCondition();
                ItemEvent?.Invoke();
                FormulaFunctionEvent?.Invoke(this);

                WasValueChanged = true;
            }
        }

        [JsonIgnore]
        [Ignore]
        public string AnswerText { get; set; }

        [JsonIgnore]
        [Ignore]
        public List<AnswerOption> OrderedAnswerOptions { get; set; }

        [JsonIgnore]
        [Ignore]
        public List<FormQuestion> ConditionObjects { get; set; }

        [JsonIgnore]
        [Ignore]
        public List<FormQuestion> MandatoryConditionObjects { get; set; }

        [JsonIgnore]
        [Ignore]
        public List<FormQuestion> FormulaFunctionObjects { get; set; }

        [JsonIgnore]
        [Ignore]
        public Dictionary<string, string> ConditionObjectRules { get; set; }

        [JsonIgnore]
        public string CalculationUidsBlobbed { get; set; }

        [JsonIgnore]
        [Ignore]
        public List<FormQuestion> ExpressionObjects { get; set; }

        [JsonIgnore]
        [Ignore]
        public Action ItemEvent { get; set; }

        [JsonIgnore]
        [Ignore]
        public Action<FormQuestion> FormulaFunctionEvent { get; set; }

        [JsonIgnore]
        [ForeignKey(typeof(FormSection))]
        public Guid SectionId { get; set; }

        [JsonIgnore]
        [Ignore]
        public bool WasValueChanged { get; set; }

        [JsonIgnore]
        private bool _isValid;

        [JsonIgnore]
        private string _errorMessage;

        [JsonIgnore]
        private DateTime? dateAnswer;

        [JsonIgnore]
        [Ignore]
        public DateTime? DateAnswer
        {
            get
            {
                return dateAnswer;
            }
            set
            {
                SetProperty(ref dateAnswer, value);

                ValidateConditionalObjectsVisibility();
                ValidateMandatoryAnswer();
                ValidateCondition();
                ItemEvent?.Invoke();
                FormulaFunctionEvent?.Invoke(this);

                WasValueChanged = true;
            }
        }

        [JsonIgnore]
        [Ignore]
        public string KeyboardType
        {
            get
            {
                return AnswerType;
            }
        }

        [JsonIgnore]
        private bool isVisible;

        [JsonIgnore]
        [Ignore]
        public bool IsVisible
        {
            get
            {
                return isVisible;
            }
            set
            {
                SetProperty(ref isVisible, value);
            }
        }

        [JsonIgnore]
        [Ignore]
        public bool IsValid
        {
            get
            {
                return _isValid;
            }
            set
            {
                _isValid = value;
                RaisePropertyChanged(nameof(IsValid));
            }
        }

        [JsonIgnore]
        [Ignore]
        public string ErrorMessage
        {
            get
            {
                return _errorMessage;
            }
            set
            {
                _errorMessage = value;
                RaisePropertyChanged(nameof(ErrorMessage));
            }
        }

        [JsonIgnore]
        [Ignore]
        public IList<Guid> DeletedChildrenFormIds { get; set; }

        #region Internal methods
        public void EvaluateExpression()
        {
            if (string.IsNullOrWhiteSpace(this.Formula))
                return;

            bool IsExpressionComplete = true;
            string finalExpression = this.Formula;
            foreach (var item in this.ExpressionObjects)
            {
                if (string.IsNullOrWhiteSpace(item.Answer))
                {
                    IsExpressionComplete = false;
                }
                else
                {
                    finalExpression = finalExpression.ToLower().Replace($"{item.UID}", item.Answer);
                }
            }

            if (IsExpressionComplete)
            {
                try
                {
                    finalExpression = finalExpression.Replace("{", "");
                    finalExpression = finalExpression.Replace("}", "");

                    double result = Convert.ToDouble(new DataTable().Compute(finalExpression, null));
                    this.Answer = result.ToString("0.##");
                }
                catch (Exception)
                {
                    this.Answer = "...";
                }
            }
            else
            {
                this.Answer = "0";
            }
            RaisePropertyChanged(nameof(Answer));
        }

        protected void ValidateCondition()
        {
            try
            {
                if (string.IsNullOrWhiteSpace(this.Validation)) throw new ArgumentException("IGNORE");
                if (string.IsNullOrWhiteSpace(this.Answer)) throw new ArgumentException("IGNORE");

                string[] validationValues = this.Validation.Split('@');
                if (string.IsNullOrWhiteSpace(validationValues[0])) throw new ArgumentException("IGNORE");

                string condition = string.Format(validationValues[0], Answer.Split('|'));
                this.IsValid = ModelFunctions.TestCondition(condition);

                if (!this.IsValid && !string.IsNullOrWhiteSpace(validationValues[1]))
                {
                    this.ErrorMessage = validationValues[1];
                }
                else if (this.IsValid)
                {
                    this.ErrorMessage = "";
                }
            }
            catch (Exception ex)
            {
                //Do nothing
                if (ex.Message != "IGNORE")
                {
                    Console.WriteLine($"************** Message: {ex.Message}");
                    Console.WriteLine($"************** Trace: {ex.StackTrace}");
                }
            }
        }

        protected void ValidateMandatoryAnswer()
        {
            if (!this.IsMandatory)
            {
                this.IsValid = true;
                return;
            }

            string answer = "";

            switch (Type)
            {
                case FormItemType.Date:
                case FormItemType.Datetime:
                    answer = DateAnswer?.ToShortDateString();
                    break;

                default:
                    answer = this.Answer;
                    break;
            }

            if (string.IsNullOrEmpty(answer))
            {
                IsValid = false;
                ErrorMessage = AlertMessages.MissingValues;
            }
            else
            {
                IsValid = true;
                ErrorMessage = string.Empty;
            }
        }

        protected void ValidateConditionalObjectsVisibility()
        {
            foreach (var question in ConditionObjects)
            {
                question.IsVisible = ModelFunctions.IsConditionExpressionValid(question.Condition, this);
            }
        }

        private bool IsValidFormat()
        {
            IsValid = true;
            ErrorMessage = null;

            if (Type != FormItemType.EntryField)
                return true;

            if (string.IsNullOrEmpty(Answer))
                return true;

            bool isNumericValue = double.TryParse(Answer, out _);

            if (!isNumericValue)
            {
                IsValid = false;
                ErrorMessage = $"Only numbers allowed";

                return false;
            }

            return true;
        }
        #endregion
    }
}